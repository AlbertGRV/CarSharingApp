using CarSharingApp.Models.Enums;

@model IEnumerable<Booking>

@if (Model.Any())
{
    <div class="row">
        @foreach (var booking in Model)
        {
            <div class="col-lg-6 mb-4">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <!-- –°—Ç–∞—Ç—É—Å -->
                        <div class="d-flex justify-content-between align-items-start mb-3">
                            <span class="badge @GetStatusBadgeClass(booking.Status)">
                                @GetStatusText(booking.Status)
                            </span>
                            <small class="text-muted">#@booking.Id</small>
                        </div>

                        <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ -->
                        <div class="d-flex mb-3">
                            <div class="flex-shrink-0">
                                <img src="@(booking.Car.ImageUrl ?? "/placeholder.svg?height=80&width=120")" 
                                     alt="@booking.Car.Brand @booking.Car.Model" 
                                     class="rounded" style="width: 120px; height: 80px; object-fit: cover;">
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <h5 class="mb-1">@booking.Car.Brand @booking.Car.Model</h5>
                                <p class="text-muted mb-1">@booking.Car.Color, @booking.Car.Year –≥–æ–¥</p>
                                <small class="text-muted">
                                    <i class="me-1">üìç</i>@booking.Car.Address
                                </small>
                            </div>
                        </div>

                        <!-- –í—Ä–µ–º—è –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å -->
                        <div class="row mb-3">
                            <div class="col-6">
                                <small class="text-muted">–ù–∞—á–∞–ª–æ</small>
                                <div class="fw-bold">@booking.StartTime?.ToString("dd.MM.yyyy")</div>
                                <div class="text-muted">@booking.StartTime?.ToString("HH:mm")</div>
                            </div>
                            <div class="col-6">
                                <small class="text-muted">–û–∫–æ–Ω—á–∞–Ω–∏–µ</small>
                                <div class="fw-bold">@booking.EndTime?.ToString("dd.MM.yyyy")</div>
                                <div class="text-muted">@booking.EndTime?.ToString("HH:mm")</div>
                            </div>
                        </div>

                        <!-- –°—Ç–æ–∏–º–æ—Å—Ç—å -->
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <span class="text-muted">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                            <span class="h5 mb-0 text-primary">@booking.TotalCost?.ToString("N0") ‚ÇΩ</span>
                        </div>

                        <!-- –î–µ–π—Å—Ç–≤–∏—è -->
                        <div class="d-flex gap-2">
                            <a asp-action="BookingDetails" asp-route-id="@booking.Id" 
                               class="btn btn-outline-primary btn-sm flex-grow-1">
                                <i class="me-1">üëÅÔ∏è</i>–î–µ—Ç–∞–ª–∏
                            </a>
                            
                            @if (booking.Status == BookingStatus.Active && booking.StartTime > DateTime.Now)
                            {
                                <button type="button" class="btn btn-outline-danger btn-sm" 
                                        data-bs-toggle="modal" data-bs-target="#cancelModal@(booking.Id)">
                                    <i class="me-1">‚ùå</i>–û—Ç–º–µ–Ω–∏—Ç—å
                                </button>
                            }
                        </div>
                    </div>

                    <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π -->
                    @if (booking.Status == BookingStatus.Active)
                    {
                        <div class="card-footer bg-light border-0">
                            @if (booking.StartTime <= DateTime.Now && booking.EndTime >= DateTime.Now)
                            {
                                <div class="text-center">
                                    <span class="badge bg-success">üöó –ü–æ–µ–∑–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞</span>
                                    <div class="mt-1">
                                        <small class="text-muted">
                                            –û–∫–æ–Ω—á–∞–Ω–∏–µ —á–µ—Ä–µ–∑: <span id="countdown-@booking.Id"></span>
                                        </small>
                                    </div>
                                </div>
                            }
                            else if (booking.StartTime > DateTime.Now)
                            {
                                <div class="text-center">
                                    <span class="badge bg-warning">‚è∞ –û–∂–∏–¥–∞–µ—Ç –Ω–∞—á–∞–ª–∞</span>
                                    <div class="mt-1">
                                        <small class="text-muted">
                                            –ù–∞—á–∞–ª–æ —á–µ—Ä–µ–∑: <span id="countdown-@booking.Id"></span>
                                        </small>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–º–µ–Ω—ã -->
            @if (booking.Status == BookingStatus.Active && booking.StartTime > DateTime.Now)
            {
                <div class="modal fade" id="cancelModal@(booking.Id)" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?</p>
                                <div class="alert alert-info">
                                    <strong>@booking.Car.Brand @booking.Car.Model</strong><br>
                                    @booking.StartTime?.ToString("dd.MM.yyyy HH:mm") - @booking.EndTime?.ToString("dd.MM.yyyy HH:mm")<br>
                                    –°—Ç–æ–∏–º–æ—Å—Ç—å: @booking.TotalCost ‚ÇΩ
                                </div>
                                <p class="text-muted small">
                                    –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.
                                </p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
                                <form asp-action="CancelBooking" asp-route-id="@booking.Id" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-danger">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
}
else
{
    <div class="text-center py-5">
        <div class="display-1 text-muted mb-3">üìã</div>
        <h4 class="text-muted">–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h4>
        <p class="text-muted">–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</p>
        <a asp-action="QuickBooking" class="btn btn-primary">
            <i class="me-2">‚ûï</i>–°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        </a>
    </div>
}

@functions {
    private string GetStatusBadgeClass(BookingStatus status)
    {
        return status switch
        {
            BookingStatus.Active => "bg-success",
            BookingStatus.Completed => "bg-secondary",
            BookingStatus.Cancelled => "bg-danger",
            // BookingStatus.Pending => "bg-warning",
            _ => "bg-secondary"
        };
    }

    private string GetStatusText(BookingStatus status)
    {
        return status switch
        {
            BookingStatus.Active => "–ê–∫—Ç–∏–≤–Ω–æ",
            BookingStatus.Completed => "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            BookingStatus.Cancelled => "–û—Ç–º–µ–Ω–µ–Ω–æ",
            // BookingStatus.Pending => "–û–∂–∏–¥–∞–µ—Ç",
            _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        };
    }
}

@section Scripts {
    <script>
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        function updateCountdowns() {
            @foreach (var booking in Model.Where(b => b.Status == BookingStatus.Active))
            {
                <text>
                var targetDate@(booking.Id) = new Date('@(booking.StartTime > DateTime.Now ? booking.StartTime : booking.EndTime)');
                var now = new Date();
                var diff = targetDate@(booking.Id) - now;
                
                var element = document.getElementById('countdown-@booking.Id');
                if (element && diff > 0) {
                    var days = Math.floor(diff / (1000 * 60 * 60 * 24));
                    var hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    var minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
                    
                    var countdownText = '';
                    if (days > 0) countdownText += days + ' –¥. ';
                    countdownText += hours + ' —á. ' + minutes + ' –º–∏–Ω.';
                    
                    element.textContent = countdownText;
                } else if (element) {
                    element.textContent = '–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ';
                }
                </text>
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        updateCountdowns();
        setInterval(updateCountdowns, 60000);
    </script>
}